[编程题]跳石板
小易来到了一条石板路前，每块石板上从1挨着编号为：1、2、3.......
 这条石板路要根据特殊的规则才能前进：对于小易当前所在的编号为K的
石板，小易单次只能往前跳K的一个约数(不含1和K)步，即跳到K+X(X为K的一个非1和本身的约数)的位置。 小易当前处在编号为N的石板，他想跳到编号恰好为M的石板去，小易想知道最少需要跳跃几次可以到达。
 例如：
 N = 4，M = 24：
 4->6->8->12->18->24
 于是小易最少需要跳跃5次，就可以从4号石板跳到24号石板

 
 解题思路：
 存储：需要列表储存第K+X步的因子组(形式[[],[],[]],初始for循环生成)，需要存储当前累加步数列表res[]
 暴力思想：枚举所有N到M的所需要的步数，取最小步数
 改进：动态规划思想，分解成子问题，每个子问题取当前步数最小

 伪代码

 for 遍历编号：
	for 遍历每个编号的因子组：
		
		若 当前编号步数（累加）空--为什么考虑？因为初始res[]为空
			当前编号步数=前一编号步数+1
		否则
		取  当前编号步数（累加）和 前一编号（累加）步数+1 的最小值--这是因为在同一编号出现两次步数，取min
		
		终止条件 编号 达到 M



import sys
import collections
def jump(N,M):
	div=[[]for _ in range(M+1)]
	for i in range(N,M+1):
		for factor in range(2,i):
			if i%factor==0:
				div[i].append(factor)
	#get a group of factor
	res=[0]*(M+1)
	res[N]=1
	for i in range(N,M+1):
		for nd in div[i]:
			if i+nd<=M:
				res[i+nd]=min(res[i+nd],res[i]+1) if res[i+nd] else res[i]+1
				#nd represent next deep,res represent step's num
	return res[M]-1 if res[M] else -1
if __name__ == '__main__':
    try:
        std_in = sys.stdin
	##std_in = open("parlindromes.txt")
        while True:
            line = std_in.readline()
            if line == '':
                break
            line = [int(t) for t in line.splitlines()[0].split()]
            print(jump(line[0], line[1]))
    except:
        pass


				


